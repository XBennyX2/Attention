/*
 * tests/dynamics/HebbianUpdatingAgentUTest.cxxtest
 *
 * Copyright (C) 2024
 * All Rights Reserved
 *
 * Written by <Your Name>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/attentionbank/types/atom_types.h>
#include <opencog/attention/HebbianUpdatingAgent.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/cogserver/modules/agents/Scheduler.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>

using namespace opencog;
using namespace std;

class HebbianUpdatingAgentUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    AgentPtr _hebbianupdating_agentptr;
    CogServer* _cogserver;
    Scheduler* _scheduler;

public:
    void tearDown()
    {
        _cogserver->stop();
    }

    void InitCogServer()
    {
        _cogserver = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        _cogserver->loadModules();
        config().set("MODULES", "libagents.so");
        Module* amod = _cogserver->getModule("opencog::AgentsModule");
        AgentsModule* agmod = (AgentsModule*) amod;
        _scheduler = &agmod->get_scheduler();

        AttentionParamQuery _atq(&cogserver().getAtomSpace());
        _atq.load_default_values(); // Load default ECAN param values into AS

        Factory<HebbianUpdatingAgent, Agent> hebbianUpdatingFactory;
        _scheduler->registerAgent(HebbianUpdatingAgent::info().id, &hebbianUpdatingFactory);
        _hebbianupdating_agentptr =
            _scheduler->createAgent(HebbianUpdatingAgent::info().id, false);

        this->as = &cogserver().getAtomSpace();
    }

    void testHebbianLinkUpdating(void)
    {
        InitCogServer();
        _scheduler->startAgent(_hebbianupdating_agentptr, true, "hca");

        AttentionBank& ab = attentionbank(&cogserver().getAtomSpace());
        count_t conf90 = 900; //SimpleTruthValue::confidenceToCount(0.90);

        // Populate the AtomSpace with example nodes and Hebbian links
        Handle a = as->add_node(CONCEPT_NODE, "A");
        Handle b = as->add_node(CONCEPT_NODE, "B");
        Handle c = as->add_node(CONCEPT_NODE, "C");
        Handle abLink = as->add_link(ASYMMETRIC_HEBBIAN_LINK, a, b);
        abLink->setTruthValue(SimpleTruthValue::createTV(0.5, conf90));

        // Stimulate nodes to add them to attentional focus
        ab.stimulate(a, 200);
        ab.stimulate(b, 200);
        ab.stimulate(c, 200);

        // Allow the events to propagate
        sleep(1);

        // Validate that Hebbian links exist between the expected nodes
        HandleSeq attentionalFocus;
        ab.get_handle_set_in_attentional_focus(back_inserter(attentionalFocus));
        TS_ASSERT_EQUALS(attentionalFocus.size(), 3);

        HandleSeq hebbianLinks;
        as->get_handles_by_type(back_inserter(hebbianLinks), ASYMMETRIC_HEBBIAN_LINK);
        TS_ASSERT_EQUALS(hebbianLinks.size(), 1);

        // Validate that the Hebbian link truth value was updated
        TruthValuePtr updatedTV = abLink->getTruthValue();
        double updatedStrength = updatedTV->get_mean();

        TS_ASSERT(updatedStrength > 0.4); // The strength should have increased

        _scheduler->stopAgent(_hebbianupdating_agentptr);
    }
};
